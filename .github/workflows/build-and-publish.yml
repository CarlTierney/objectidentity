name: Build and Publish NuGet Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

# Define the SQL password at the top of the file - used in multiple places
env:
  SQL_PASSWORD: "SecretsAreHandicapped@2025!"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    services:
      sql:
        image: mcr.microsoft.com/mssql/server:2019-CU16-ubuntu-20.04
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: "${{ env.SQL_PASSWORD }}"
          MSSQL_DATA_DIR: /var/opt/mssql/data
        ports:
          - 1433:1433
        options: >-
          --health-cmd="(/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"SecretsAreHandicapped@2025!\" -Q \"SELECT 1\" && exit 0) || exit 1"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 120s
      
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Ensures all history and tags are fetched for versioning
        
    - name: Install SQL Server tools
      run: |
        # Install SQL Server client tools
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $HOME/.bashrc
        source $HOME/.bashrc

    - name: Wait for SQL Server to be ready
      run: |
        # Wait a bit longer to ensure SQL Server is fully ready
        sleep 10
        
    - name: Create Test Database
      run: |
        # Create the test database - connect to SQL Server service container
        # In GitHub Actions, services are accessible via localhost and the mapped port
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.SQL_PASSWORD }}" -Q "CREATE DATABASE SequentialIdTests"
        
    - name: Verify Database Connection
      run: |
        # Verify the database was created and is accessible
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.SQL_PASSWORD }}" -Q "SELECT DB_ID('SequentialIdTests') as DatabaseId"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${{ env.SQL_PASSWORD }}" -d SequentialIdTests -Q "SELECT 1 as ConnectionTest"
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          9.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal
      env:
        ConnectionStrings__testdb: "Server=localhost;Database=SequentialIdTests;User Id=sa;Password=${{ env.SQL_PASSWORD }};TrustServerCertificate=True;"
    
    - name: Pack
      run: dotnet pack ObjectIdentity/ObjectIdentity.csproj --configuration Release --no-build --output ./nupkgs --include-symbols -p:SymbolPackageFormat=snupkg
    
    - name: Push to NuGet.org
      # Only run this step when pushing to main branch (not for PRs)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: dotnet nuget push ./nupkgs/*.nupkg  --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGETAPIKEY  }}